package main

import (
	"crypto/sha256"
	"fmt"
	"log"

	"github.com/yeaops/gopkcs11"
)

// Example demonstrates basic usage of the gopkcs11 library
func main() {
	// This example shows the API design but won't run without an actual PKCS#11 library
	exampleBasicUsage()
	exampleKeyGeneration()
	exampleSigning()
	exampleVendorExtensions()
}

func exampleBasicUsage() {
	fmt.Println("=== Basic Usage Example ===")

	// Initialize the PKCS#11 library
	ctx, err := gopkcs11.New("/usr/lib/softhsm/libsofthsm2.so")
	if err != nil {
		log.Printf("Failed to load PKCS#11 library: %v", err)
		return
	}
	defer ctx.Finalize()

	// Get library version and info
	major, minor := ctx.Version()
	fmt.Printf("PKCS#11 version: %d.%d\n", major, minor)

	// Get available slots
	slots, err := ctx.GetSlotList(true)
	if err != nil {
		log.Printf("Failed to get slot list: %v", err)
		return
	}

	if len(slots) == 0 {
		log.Println("No slots found")
		return
	}

	// Get slot information
	slotInfo, err := slots[0].GetInfo()
	if err != nil {
		log.Printf("Failed to get slot info: %v", err)
		return
	}
	fmt.Printf("Slot: %s\n", slotInfo.SlotDescription)

	// Open a session
	session, err := slots[0].OpenSession(gopkcs11.CKF_SERIAL_SESSION | gopkcs11.CKF_RW_SESSION)
	if err != nil {
		log.Printf("Failed to open session: %v", err)
		return
	}
	defer session.Close()

	// Login
	err = session.Login(gopkcs11.CKU_USER, "1234")
	if err != nil {
		log.Printf("Failed to login: %v", err)
		return
	}
	defer session.Logout()

	fmt.Println("Successfully connected to PKCS#11 token")
}

func exampleKeyGeneration() {
	fmt.Println("\n=== Key Generation Example ===")

	// This demonstrates the API for key generation
	// (would require actual PKCS#11 library to run)

	fmt.Println("API for RSA key pair generation:")
	fmt.Println("mechanism := gopkcs11.NewMechanismRSAPKCSKeyPairGen()")
	fmt.Println("pubTemplate := []*gopkcs11.Attribute{")
	fmt.Println("    gopkcs11.NewAttributeClass(gopkcs11.CKO_PUBLIC_KEY),")
	fmt.Println("    gopkcs11.NewAttributeKeyType(gopkcs11.CKK_RSA),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_MODULUS_BITS, uint(2048)),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_PUBLIC_EXPONENT, []byte{1, 0, 1}),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_TOKEN, true),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_VERIFY, true),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_LABEL, \"my-public-key\"),")
	fmt.Println("}")
	fmt.Println("privTemplate := []*gopkcs11.Attribute{")
	fmt.Println("    gopkcs11.NewAttributeClass(gopkcs11.CKO_PRIVATE_KEY),")
	fmt.Println("    gopkcs11.NewAttributeKeyType(gopkcs11.CKK_RSA),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_TOKEN, true),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_SIGN, true),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_LABEL, \"my-private-key\"),")
	fmt.Println("}")
	fmt.Println("pubKey, privKey, err := session.GenerateKeyPair(mechanism, pubTemplate, privTemplate)")
}

func exampleSigning() {
	fmt.Println("\n=== Signing Example ===")

	// This demonstrates the API for signing operations
	fmt.Println("API for signing with standard Go crypto interfaces:")
	fmt.Println("// Find private key")
	fmt.Println("objects, err := session.FindObjects([]*gopkcs11.Attribute{")
	fmt.Println("    gopkcs11.NewAttributeClass(gopkcs11.CKO_PRIVATE_KEY),")
	fmt.Println("    gopkcs11.NewAttribute(gopkcs11.CKA_LABEL, \"my-private-key\"),")
	fmt.Println("})")
	fmt.Println("privKey := objects[0].(gopkcs11.PrivateKey)")
	fmt.Println("")
	fmt.Println("// Create a crypto.Signer interface")
	fmt.Println("signer, err := ctx.NewSigner(session, privKey)")
	fmt.Println("")
	fmt.Println("// Sign data using standard Go crypto interface")
	fmt.Println("data := []byte(\"Hello, PKCS#11!\")")
	fmt.Println("hashed := sha256.Sum256(data)")
	fmt.Println("signature, err := signer.Sign(rand.Reader, hashed[:], crypto.SHA256)")

	// Show what the actual signing would look like
	data := []byte("Hello, PKCS#11!")
	hashed := sha256.Sum256(data)
	fmt.Printf("\nData to sign: %s\n", string(data))
	fmt.Printf("SHA256 hash: %x\n", hashed)
	fmt.Println("Signature would be generated by HSM...")
}

func exampleVendorExtensions() {
	fmt.Println("\n=== Vendor Extensions Example ===")

	fmt.Println("API for Thales HSM extensions:")
	fmt.Println("if ctx.SupportsVendor(\"thales\") {")
	fmt.Println("    thales, err := ctx.ThalesExtension()")
	fmt.Println("    if err == nil {")
	fmt.Println("        // Use Thales-specific functionality")
	fmt.Println("        cryptogram, err := thales.GenerateCryptogram(session, key, data)")
	fmt.Println("        version, err := thales.GetKeyVersion(session, key)")
	fmt.Println("    }")
	fmt.Println("}")
	fmt.Println("")
	fmt.Println("API for Utimaco HSM extensions:")
	fmt.Println("if ctx.SupportsVendor(\"utimaco\") {")
	fmt.Println("    utimaco, err := ctx.UtimacoExtension()")
	fmt.Println("    if err == nil {")
	fmt.Println("        // Use Utimaco-specific functionality")
	fmt.Println("        backup, err := utimaco.CreateBackup(session, key, backupKey)")
	fmt.Println("        deviceInfo, err := utimaco.GetDeviceInfo(slot)")
	fmt.Println("    }")
	fmt.Println("}")
}
