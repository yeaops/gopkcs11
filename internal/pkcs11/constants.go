package pkcs11

import (
	"bytes"
	"strings"
)

// PKCS#11 return values
const (
	CKR_OK                             = 0x00000000
	CKR_CANCEL                         = 0x00000001
	CKR_HOST_MEMORY                    = 0x00000002
	CKR_SLOT_ID_INVALID                = 0x00000003
	CKR_GENERAL_ERROR                  = 0x00000005
	CKR_FUNCTION_FAILED                = 0x00000006
	CKR_ARGUMENTS_BAD                  = 0x00000007
	CKR_ATTRIBUTE_READ_ONLY            = 0x00000010
	CKR_ATTRIBUTE_TYPE_INVALID         = 0x00000012
	CKR_ATTRIBUTE_VALUE_INVALID        = 0x00000013
	CKR_DATA_INVALID                   = 0x00000020
	CKR_DATA_LEN_RANGE                 = 0x00000021
	CKR_DEVICE_ERROR                   = 0x00000030
	CKR_DEVICE_MEMORY                  = 0x00000031
	CKR_DEVICE_REMOVED                 = 0x00000032
	CKR_FUNCTION_CANCELED              = 0x00000050
	CKR_FUNCTION_NOT_PARALLEL          = 0x00000051
	CKR_FUNCTION_NOT_SUPPORTED         = 0x00000054
	CKR_KEY_HANDLE_INVALID             = 0x00000060
	CKR_KEY_SIZE_RANGE                 = 0x00000062
	CKR_KEY_TYPE_INCONSISTENT          = 0x00000063
	CKR_MECHANISM_INVALID              = 0x00000070
	CKR_MECHANISM_PARAM_INVALID        = 0x00000071
	CKR_OBJECT_HANDLE_INVALID          = 0x00000082
	CKR_OPERATION_ACTIVE               = 0x00000090
	CKR_OPERATION_NOT_INITIALIZED      = 0x00000091
	CKR_PIN_INCORRECT                  = 0x000000A0
	CKR_PIN_INVALID                    = 0x000000A1
	CKR_PIN_LEN_RANGE                  = 0x000000A2
	CKR_PIN_LOCKED                     = 0x000000A4
	CKR_SESSION_CLOSED                 = 0x000000B0
	CKR_SESSION_COUNT                  = 0x000000B1
	CKR_SESSION_HANDLE_INVALID         = 0x000000B3
	CKR_SESSION_PARALLEL_NOT_SUPPORTED = 0x000000B4
	CKR_SESSION_READ_ONLY              = 0x000000B5
	CKR_SIGNATURE_INVALID              = 0x000000C0
	CKR_SIGNATURE_LEN_RANGE            = 0x000000C1
	CKR_TEMPLATE_INCOMPLETE            = 0x000000D0
	CKR_TEMPLATE_INCONSISTENT          = 0x000000D1
	CKR_TOKEN_NOT_PRESENT              = 0x000000E0
	CKR_TOKEN_NOT_RECOGNIZED           = 0x000000E1
	CKR_TOKEN_WRITE_PROTECTED          = 0x000000E2
	CKR_USER_ALREADY_LOGGED_IN         = 0x00000100
	CKR_USER_NOT_LOGGED_IN             = 0x00000101
	CKR_USER_PIN_NOT_INITIALIZED       = 0x00000102
)

// Error code mappings
var errorMap = map[uint]string{
	CKR_OK:                             "CKR_OK",
	CKR_CANCEL:                         "CKR_CANCEL",
	CKR_HOST_MEMORY:                    "CKR_HOST_MEMORY",
	CKR_SLOT_ID_INVALID:                "CKR_SLOT_ID_INVALID",
	CKR_GENERAL_ERROR:                  "CKR_GENERAL_ERROR",
	CKR_FUNCTION_FAILED:                "CKR_FUNCTION_FAILED",
	CKR_ARGUMENTS_BAD:                  "CKR_ARGUMENTS_BAD",
	CKR_ATTRIBUTE_READ_ONLY:            "CKR_ATTRIBUTE_READ_ONLY",
	CKR_ATTRIBUTE_TYPE_INVALID:         "CKR_ATTRIBUTE_TYPE_INVALID",
	CKR_ATTRIBUTE_VALUE_INVALID:        "CKR_ATTRIBUTE_VALUE_INVALID",
	CKR_DEVICE_ERROR:                   "CKR_DEVICE_ERROR",
	CKR_DEVICE_MEMORY:                  "CKR_DEVICE_MEMORY",
	CKR_DEVICE_REMOVED:                 "CKR_DEVICE_REMOVED",
	CKR_FUNCTION_CANCELED:              "CKR_FUNCTION_CANCELED",
	CKR_FUNCTION_NOT_PARALLEL:          "CKR_FUNCTION_NOT_PARALLEL",
	CKR_FUNCTION_NOT_SUPPORTED:         "CKR_FUNCTION_NOT_SUPPORTED",
	CKR_KEY_HANDLE_INVALID:             "CKR_KEY_HANDLE_INVALID",
	CKR_KEY_SIZE_RANGE:                 "CKR_KEY_SIZE_RANGE",
	CKR_KEY_TYPE_INCONSISTENT:          "CKR_KEY_TYPE_INCONSISTENT",
	CKR_MECHANISM_INVALID:              "CKR_MECHANISM_INVALID",
	CKR_MECHANISM_PARAM_INVALID:        "CKR_MECHANISM_PARAM_INVALID",
	CKR_OBJECT_HANDLE_INVALID:          "CKR_OBJECT_HANDLE_INVALID",
	CKR_OPERATION_ACTIVE:               "CKR_OPERATION_ACTIVE",
	CKR_OPERATION_NOT_INITIALIZED:      "CKR_OPERATION_NOT_INITIALIZED",
	CKR_PIN_INCORRECT:                  "CKR_PIN_INCORRECT",
	CKR_PIN_INVALID:                    "CKR_PIN_INVALID",
	CKR_PIN_LEN_RANGE:                  "CKR_PIN_LEN_RANGE",
	CKR_PIN_LOCKED:                     "CKR_PIN_LOCKED",
	CKR_SESSION_CLOSED:                 "CKR_SESSION_CLOSED",
	CKR_SESSION_COUNT:                  "CKR_SESSION_COUNT",
	CKR_SESSION_HANDLE_INVALID:         "CKR_SESSION_HANDLE_INVALID",
	CKR_SESSION_PARALLEL_NOT_SUPPORTED: "CKR_SESSION_PARALLEL_NOT_SUPPORTED",
	CKR_SESSION_READ_ONLY:              "CKR_SESSION_READ_ONLY",
	CKR_SIGNATURE_INVALID:              "CKR_SIGNATURE_INVALID",
	CKR_SIGNATURE_LEN_RANGE:            "CKR_SIGNATURE_LEN_RANGE",
	CKR_TEMPLATE_INCOMPLETE:            "CKR_TEMPLATE_INCOMPLETE",
	CKR_TEMPLATE_INCONSISTENT:          "CKR_TEMPLATE_INCONSISTENT",
	CKR_TOKEN_NOT_PRESENT:              "CKR_TOKEN_NOT_PRESENT",
	CKR_TOKEN_NOT_RECOGNIZED:           "CKR_TOKEN_NOT_RECOGNIZED",
	CKR_TOKEN_WRITE_PROTECTED:          "CKR_TOKEN_WRITE_PROTECTED",
	CKR_USER_ALREADY_LOGGED_IN:         "CKR_USER_ALREADY_LOGGED_IN",
	CKR_USER_NOT_LOGGED_IN:             "CKR_USER_NOT_LOGGED_IN",
	CKR_USER_PIN_NOT_INITIALIZED:       "CKR_USER_PIN_NOT_INITIALIZED",
}

// Return the string representation of an error code
func ErrorString(code uint) string {
	if s, ok := errorMap[code]; ok {
		return s
	}
	return "UNKNOWN_ERROR"
}

// Helper function to trim null bytes from a byte array
func TrimNull(b []byte) string {
	n := bytes.IndexByte(b, 0)
	if n == -1 {
		n = len(b)
	}
	return string(b[:n])
}

// Helper function to trim spaces from a string
func TrimSpace(s string) string {
	return strings.TrimSpace(s)
}
